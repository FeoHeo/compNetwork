* Socket stuff
- Use the socket module, test.py has an example on how to create and connect via sockets
- There is also test1.py which is an example of create a socket for listeining
- https://github.com/anapeksha/python-proxy-server - link to a proxy server in Python that forwards request
    + This code does not support caching but it is good reference
- bind(('', port)) - port is self-explanatory, '' is interchangeble to 0.0.0.0 which means the method will 
bind to all network interfaces (you can mod it to listen to local only, custom ipv4 or custom ipv6)

- socket.accept() will return 2 values (conn , addr) sequentially. conn refer to the socket object that 
can be use to call send() and recv(). Whereas addr contains the info about the conenction accepted. 'addr'
is just a tuple(tuple is kinda linke python's version of C struct) that contains typle<"client_ip_adrr_string" , client_port_num_int>
ip_addr of client is saved under a string type (probably of ipv6 addr being too long for int and we also need '.' characters)

* From example github forward proxy:
- at start() (it's like the main() of the program) -> start a new thread that executes conn_string to parse down info needed to start proxy 
-> conn_string calls proxy_server that will start on designated webserver and port. 